**Class:** `Transaction`

**Description:**

The `Transaction` class represents a transaction in a library management system. It has the following properties:

* `id`: The unique identifier of the transaction.
* `bookId`: The ID of the book that was borrowed or returned.
* `memberId`: The ID of the member who borrowed or returned the book.
* `borrowDate`: The date on which the book was borrowed.
* `returnDate`: The date on which the book was returned.

**Annotations:**

* `@Id`: This annotation indicates that the `id` field is the primary key of the `Transaction` entity.
* `@GeneratedValue`: This annotation indicates that the `id` field should be automatically generated by the database.

**Usage:**

You can use this class to represent transactions in a library management system. You can create new `Transaction` objects, set their properties, and save them to the database. You can also retrieve `Transaction` objects from the database by their ID.

**Example:**

```java
Transaction transaction = new Transaction();
transaction.setBookId(1L);
transaction.setMemberId(2L);
transaction.setBorrowDate(new Date());

// Save the transaction to the database
entityManager.persist(transaction);
```

This code will create a new `Transaction` object and save it to the database. You can then retrieve the transaction from the database using its ID:

```java
Transaction transaction = entityManager.find(Transaction.class, 1L);
```

This code will retrieve the transaction with the ID of 1 from the database.